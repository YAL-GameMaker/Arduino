<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<extension>
  <name>Arduino</name>
  <version>1.0.0</version>
  <packageID></packageID>
  <ProductID></ProductID>
  <date>18/02/17</date>
  <license>Proprietary</license>
  <description></description>
  <helpfile></helpfile>
  <installdir></installdir>
  <classname></classname>
  <androidclassname></androidclassname>
  <sourcedir></sourcedir>
  <androidsourcedir></androidsourcedir>
  <macsourcedir></macsourcedir>
  <maclinkerflags></maclinkerflags>
  <maccompilerflags></maccompilerflags>
  <androidinject></androidinject>
  <androidmanifestinject></androidmanifestinject>
  <iosplistinject></iosplistinject>
  <androidactivityinject></androidactivityinject>
  <gradleinject></gradleinject>
  <iosSystemFrameworks/>
  <iosThirdPartyFrameworks/>
  <ConfigOptions>
    <Config name="Default">
      <CopyToMask>113497714299118</CopyToMask>
    </Config>
  </ConfigOptions>
  <androidPermissions/>
  <IncludedResources>
    <Resource>Included Files\Arduino.html</Resource>
  </IncludedResources>
  <files>
    <file>
      <filename>Arduino.dll</filename>
      <origname>extensions\Arduino.dll</origname>
      <init></init>
      <final></final>
      <kind>1</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>arduino_create</name>
          <externalName>arduino_create</externalName>
          <kind>1</kind>
          <help>arduino_create(com, baud) : Creates a new serial connection and returns the index in the vector or -1 if the connection failed.</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_connected</name>
          <externalName>arduino_connected</externalName>
          <kind>1</kind>
          <help>arduino_connected(index) : Checks if the arduino is connected, returns 1 for true, 0 for false, and -1 if the arduino does not exist.</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read</name>
          <externalName>arduino_read</externalName>
          <kind>1</kind>
          <help>arduino_read(index, length) : Reads data from the arduino, returns the data on success or an empty string on failure.</help>
          <returnType>1</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_to</name>
          <externalName>arduino_read_to</externalName>
          <kind>1</kind>
          <help>arduino_read_to(index, delim_str) : Reads data until a delimiter, returns the data on success or an empty string on failure.</help>
          <returnType>1</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_line</name>
          <externalName>arduino_read_line</externalName>
          <kind>1</kind>
          <help>arduino_read_line(index) : Reads data until a new line, returns the data on success or an empty string on failure.</help>
          <returnType>1</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write</name>
          <externalName>arduino_write</externalName>
          <kind>1</kind>
          <help>arduino_write(index, buffer, length) : Writes data to the arduino, returns 1 if successful, 0 if failure. and negative on error.</help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_s8</name>
          <externalName>arduino_write_s8</externalName>
          <kind>1</kind>
          <help>arduino_write_s8(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_u8</name>
          <externalName>arduino_write_u8</externalName>
          <kind>1</kind>
          <help>arduino_write_u8(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_s16</name>
          <externalName>arduino_write_s16</externalName>
          <kind>1</kind>
          <help>arduino_write_s16(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_u16</name>
          <externalName>arduino_write_u16</externalName>
          <kind>1</kind>
          <help>arduino_write_u16(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_s32</name>
          <externalName>arduino_write_s32</externalName>
          <kind>1</kind>
          <help>arduino_write_s32(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_u32</name>
          <externalName>arduino_write_u32</externalName>
          <kind>1</kind>
          <help>arduino_write_u32(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_f32</name>
          <externalName>arduino_write_f32</externalName>
          <kind>1</kind>
          <help>arduino_write_f32(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_f64</name>
          <externalName>arduino_write_f64</externalName>
          <kind>1</kind>
          <help>arduino_write_f64(index, value)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_string</name>
          <externalName>arduino_write_string</externalName>
          <kind>1</kind>
          <help>arduino_write_string(index, string) : writes a string (NUL-terminated)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_text</name>
          <externalName>arduino_write_text</externalName>
          <kind>1</kind>
          <help>arduino_write_text(index, string) : writes a string (unterminated)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>1</arg>
          </args>
        </function>
        <function>
          <name>arduino_delete</name>
          <externalName>arduino_delete</externalName>
          <kind>1</kind>
          <help>arduino_delete(index) : Deletes an arduino keeping all indices intact, returns 1 on success and 0 on failure.</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_destroy</name>
          <externalName>arduino_destroy</externalName>
          <kind>1</kind>
          <help>arduino_destroy() : Destroys all arduinos and frees memory.</help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>arduino_read_to_new_raw</name>
          <externalName>arduino_read_to_new_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_to_new_raw_post</name>
          <externalName>arduino_read_to_new_raw_post</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_line_new_raw</name>
          <externalName>arduino_read_line_new_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_line_new_raw_post</name>
          <externalName>arduino_read_line_new_raw_post</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_buffer_raw</name>
          <externalName>arduino_read_buffer_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_buffer_to_raw</name>
          <externalName>arduino_read_buffer_to_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_string_raw</name>
          <externalName>arduino_read_string_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_string_raw_post</name>
          <externalName>arduino_read_string_raw_post</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_text_raw</name>
          <externalName>arduino_read_text_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_text_raw_post</name>
          <externalName>arduino_read_text_raw_post</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s8_raw</name>
          <externalName>arduino_read_s8_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_u8_raw</name>
          <externalName>arduino_read_u8_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s16_raw</name>
          <externalName>arduino_read_s16_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_u16_raw</name>
          <externalName>arduino_read_u16_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s32_raw</name>
          <externalName>arduino_read_s32_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_u32_raw</name>
          <externalName>arduino_read_u32_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s64_raw</name>
          <externalName>arduino_read_s64_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_f32_raw</name>
          <externalName>arduino_read_f32_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_f64_raw</name>
          <externalName>arduino_read_f64_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_s64_raw</name>
          <externalName>arduino_write_s64_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_buffer_raw</name>
          <externalName>arduino_write_buffer_raw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>1</arg>
            <arg>2</arg>
          </args>
        </function>
      </functions>
      <constants/>
    </file>
    <file>
      <filename>Arduino.gml</filename>
      <origname>extensions\gml.gml</origname>
      <init></init>
      <final></final>
      <kind>2</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>Arduino_prepare_buffer</name>
          <externalName>Arduino_prepare_buffer</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
      </functions>
      <constants/>
    </file>
    <file>
      <filename>autogen.gml</filename>
      <origname>extensions\autogen.gml</origname>
      <init></init>
      <final></final>
      <kind>2</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>9223372036854775807</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>arduino_read_to_new</name>
          <externalName>arduino_read_to_new</externalName>
          <kind>2</kind>
          <help>arduino_read_to_new(index:number, delim_u8:number)-&gt;string?</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_line_new</name>
          <externalName>arduino_read_line_new</externalName>
          <kind>2</kind>
          <help>arduino_read_line_new(index:number)-&gt;string? Reads until an `\n`</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_buffer</name>
          <externalName>arduino_read_buffer</externalName>
          <kind>2</kind>
          <help>arduino_read_buffer(index:number, buf:buffer, pos:int, len:int)-&gt;int Reads bytes to a buffer, returns number of bytes read (-1, -2 special)</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_buffer_to</name>
          <externalName>arduino_read_buffer_to</externalName>
          <kind>2</kind>
          <help>arduino_read_buffer_to(index:number, buf:buffer, pos:int, len:int, delim_u8:int)-&gt;int</help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_string</name>
          <externalName>arduino_read_string</externalName>
          <kind>2</kind>
          <help>arduino_read_string(index:number)-&gt;string? Reads a NUL-terminated string</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_text</name>
          <externalName>arduino_read_text</externalName>
          <kind>2</kind>
          <help>arduino_read_text(index:number, length:number)-&gt;string?</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s8</name>
          <externalName>arduino_read_s8</externalName>
          <kind>2</kind>
          <help>arduino_read_s8(index:number)-&gt;int? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_u8</name>
          <externalName>arduino_read_u8</externalName>
          <kind>2</kind>
          <help>arduino_read_u8(index:number)-&gt;int? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s16</name>
          <externalName>arduino_read_s16</externalName>
          <kind>2</kind>
          <help>arduino_read_s16(index:number)-&gt;int? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_u16</name>
          <externalName>arduino_read_u16</externalName>
          <kind>2</kind>
          <help>arduino_read_u16(index:number)-&gt;int? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s32</name>
          <externalName>arduino_read_s32</externalName>
          <kind>2</kind>
          <help>arduino_read_s32(index:number)-&gt;int? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_u32</name>
          <externalName>arduino_read_u32</externalName>
          <kind>2</kind>
          <help>arduino_read_u32(index:number)-&gt;int? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_s64</name>
          <externalName>arduino_read_s64</externalName>
          <kind>2</kind>
          <help>arduino_read_s64(index:number)-&gt;int? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_f32</name>
          <externalName>arduino_read_f32</externalName>
          <kind>2</kind>
          <help>arduino_read_f32(index:number)-&gt;number? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_read_f64</name>
          <externalName>arduino_read_f64</externalName>
          <kind>2</kind>
          <help>arduino_read_f64(index:number)-&gt;number? </help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_s64</name>
          <externalName>arduino_write_s64</externalName>
          <kind>2</kind>
          <help>arduino_write_s64(index:number, value:int)-&gt;int</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>arduino_write_buffer</name>
          <externalName>arduino_write_buffer</externalName>
          <kind>2</kind>
          <help>arduino_write_buffer(index:int, buf:buffer, pos:int, len:int)-&gt;int</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
      </functions>
      <constants/>
    </file>
  </files>
</extension>
